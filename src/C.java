import java.io.*;
import java.net.*;
import java.nio.CharBuffer;
import java.util.*;
import java.security.*;
import java.security.spec.*;
import java.math.*;
import javax.crypto.*;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
public class C {
	 public static String delimiter = "THIS_IS_A_DELIMITER";
	 static int q = 997;
	 static int CompletePassword = 0;   
	 static int password1=0;
	 static int password2=0;
	 private static PublicKey publickeyA;
	 private static PublicKey publickeyB;
	
	public static void main(String[] args) throws UnknownHostException, IOException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException{
		C client = new C();
		int portnumberA ;
		int portnumberB ;
		Scanner sc = new Scanner(System.in);
		System.out.println("Connect to Server A on Port Number : " );
		portnumberA = sc.nextInt();
		System.out.println("Connect to Server B on Port Number : ");
		portnumberB = sc.nextInt();
		Socket Sa = new Socket("10.106.226.15" , portnumberA);
		Socket Sb = new Socket("localhost" , portnumberB);
		
		OutputStream osa = Sa.getOutputStream();  // Server A  's Input & Output Streams //
		DataOutputStream aout = new DataOutputStream(osa);
		InputStream isa = Sa.getInputStream();
        DataInputStream dina = new DataInputStream(isa);
        
        OutputStream osb = Sb.getOutputStream();
        DataOutputStream bout = new DataOutputStream(osb);
        InputStream isb = Sb.getInputStream();
        DataInputStream dinb = new DataInputStream(isb);
        
        String helloa = "Hello Server A";
        aout.writeBytes(helloa + delimiter); //1W
        aout.flush();
        String ack = readMessage(dina); //2R
        System.out.println(" Server A says : " + ack);
        
        String hellob = "Hiii , Server B  ";
        bout.writeBytes(hellob + delimiter);
        bout.flush();
        String ackb = readMessage(dinb);
        System.out.println("Server B says : " + ackb);
        
        double R = Math.random();
        R = R * 10;
        int Rc = (int) R ;
        int g = 7 ;
        int Wc = (int) Math.pow(g, Rc);
        String SWc = Integer.toString(Wc);
        aout.writeBytes(SWc + delimiter); //3W
        aout.flush();
        String SWa = readMessage(dina); //4R
        int Wa = Integer.parseInt(SWa);
        int SKca = (int) Math.pow(Wa, Rc);
        System.out.println("CLIENT : Server A's Wa value : " + SWa);
        String ackSWa = "Client = Wa Value recieved";
        aout.writeBytes(ackSWa + delimiter); //5W
        aout.flush();
        bout.writeBytes(SWc + delimiter);
        bout.flush();
        String SWb = readMessage(dinb);
        int Wb = Integer.parseInt(SWb);
        int SKcb = (int) Math.pow(Wb, Rc);
        System.out.println("CLIENT : Server B's Wb value : " + SWb);
        String ackSWb = "Client = Wb Value recieved";
        bout.writeBytes(ackSWb + delimiter);
        bout.flush();
        
        //Calculating Hash Value
        
        String HashSWc = GetHash(SWc);
        String HashSWa = GetHash(SWa);
        String HashSWb = GetHash(SWb);
        String CSaHash = HashSWa + HashSWc ;
        String CSbHash = HashSWb + HashSWc ;
        String SaHash = readMessage(dina); //6R
        String SbHash = readMessage(dinb);
        System.out.println("Hash of Server A generated by Client : " +SaHash);
        System.out.println("Hash of Server B generated by Client : " +SbHash);
        String ackAHash = "Client = Hash received from Server A";
        aout.writeBytes(ackAHash + delimiter); //7W
        aout.flush();
        String ackBHash = "Client = Hash received from Server B";
        bout.writeBytes(ackBHash + delimiter);
        bout.flush();
        
        // Authentication of Servers
        if(CSaHash.equals(SaHash)){
        	System.out.println("CLIENT : Server A is genuine , Verified Message from Server A : " + CSaHash);
        }
        else{
        	System.out.println("CLIENT : Someone is trying to inflitrate your account");
        }
        
        if(CSbHash.equals(SbHash)){
        	System.out.println("CLIENT : Server B is genuine , Verified Message from Server B : " + CSbHash);
        }else{
        	System.out.println("CLIENT : Someone is trying to inflitrate your account");
        }
        
      //Calculating Session keys
        System.out.println("Session Keys for Client - Server A communication : " + SKca);
        System.out.println("Session Keys for Client - Server B communication : " + SKcb);
        
        //Splitting of Password
        
        client.generatePassword();
        String passwordA = Integer.toString(password1);
        String passwordB = Integer.toString(password2);
        
        //Receiving Publickeys from Servers
        String pubkeyA = readMessage(dina); //8R
        String keyackA = "Client = Public key received";
        aout.writeBytes(keyackA + delimiter); //9W
        aout.flush();
        String pubkeyB = readMessage(dinb);
        String keyackB = "Client = Your Public key received";
        bout.writeBytes(keyackB + delimiter);
        bout.flush();
        System.out.println("CLIENT : ServerA = Encoded public key string recieved from Server : " + pubkeyA);
        System.out.println("CLIENT : ServerB = Encoded public key string recieved from Server : " + pubkeyB);
        //Decoding Public key A
        BASE64Decoder decoderA = new BASE64Decoder();
        byte[] sigBytes2 = decoderA.decodeBuffer(pubkeyA);
        X509EncodedKeySpec x509KeySpecA = new X509EncodedKeySpec(sigBytes2);
        KeyFactory keyFactA = KeyFactory.getInstance("RSA");
        publickeyA = keyFactA.generatePublic(x509KeySpecA);
        System.out.println("Public key A on client side after decoding : " + publickeyA);
        
        //Decoding Public key B
        BASE64Decoder decoderB = new BASE64Decoder();
        byte[] sigBytes = decoderB.decodeBuffer(pubkeyB);
        X509EncodedKeySpec x509KeySpecB = new X509EncodedKeySpec(sigBytes);
        KeyFactory keyFactB = KeyFactory.getInstance("RSA");
        publickeyB = keyFactB.generatePublic(x509KeySpecB);
        
        //Encrypting Password for Server A & Server B :
        byte[] Ea = client.encrypt(publickeyA, passwordA);
        System.out.println("Bytes array length : " + Ea.length);
       // for(int j = 0 ; j < Ea.length ; j ++){
        //	System.out.print( Ea[j]);
       // }
        
       
        
        BASE64Encoder enc = new BASE64Encoder();
        String EA = enc.encode(Ea); 
        
        byte[] Eb = client.encrypt(publickeyB, passwordB);
        BASE64Encoder encb = new BASE64Encoder();
        String EB = encb.encode(Eb);
        
        //Passing Encrypted Passwords to both the Servers
        String serverEncrypt = readMessage(dina); //10R
        aout.writeBytes(EA + delimiter); //11W
        aout.flush();
        
        String serverEncryptB = readMessage(dinb);
        bout.writeBytes(EB + delimiter);
        bout.flush();
        
        
        
        Sa.close();
        Sb.close(); 
	}
	
	public static String GetHash(String message) throws NoSuchAlgorithmException , IOException{
    	MessageDigest digest = MessageDigest.getInstance("SHA1");
    	byte[] hashedBytes = digest.digest(message.getBytes("UTF-8"));
    	return convertToHex(hashedBytes);
    }
    private static String convertToHex(byte[] arrayBytes){
    	StringBuffer stringBuffer = new StringBuffer();
    	for(int i=0; i < arrayBytes.length; i++){
    		stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff)+ 0x100,16).substring(1));
    	}
    	return stringBuffer.toString();

}
    public void generatePassword(){
    	System.out.println("Enter your password: ");
		Scanner sc = new Scanner(System.in);
		CompletePassword = sc.nextInt();
        int maxv = CompletePassword - 1;
        int minv = 1;
        Random randomNum = new Random();
        password1 = minv + randomNum.nextInt(maxv);
        int i;
        for(i=0;i<CompletePassword;i++){
        if((password1 + i )%q == CompletePassword){
                password2 = i;
                break;
            }
        }
        System.out.println("Selected Password is : "+ CompletePassword);
        System.out.println("First Split is : " + password1);
        System.out.println("Second Split is : " + password2);
		
}
    
    public byte[] encrypt(PublicKey publicKey,String message) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException{
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        System.out.println(message);
        return cipher.doFinal(message.getBytes());
        
    }
    
	public static String readMessage(DataInputStream din) {
    	byte[] messageByte = new byte[10000];
    	boolean end = false;
    	int bytesRead=0;
    	String messageString = "";
    	while(!end)
        {
    		try {
				bytesRead = din.read(messageByte);
			} catch (IOException e) {
				e.printStackTrace();
			}
    		if(bytesRead == -1)
            	break;
            messageString += new String(messageByte, 0, bytesRead);
            if((messageString.length()  >= delimiter.length()) && messageString.substring(messageString.length()-delimiter.length()).equals(delimiter)) {
            	break;
            }
        }
    	return messageString.substring(0, messageString.length()-delimiter.length());
    }
}
